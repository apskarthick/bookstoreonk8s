steps:
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: ['-c', 'docker login --username=$$USERNAME --password=$$PASSWORD']
    secretEnv: ['USERNAME', 'PASSWORD']

  - name: gcr.io/cloud-builders/docker
    args:
      - '-c'
      - |
        [[ "$BRANCH_NAME" ]] && VERSION=${BRANCH_NAME}-${SHORT_SHA}
        [[ "$TAG_NAME" ]] && VERSION=$TAG_NAME
        docker build -t $$USERNAME/appinframodwithgke:frontend-$${VERSION} frontend/.
    secretEnv: ['USERNAME']
    id: build
    entrypoint: bash

  - name: gcr.io/cloud-builders/docker
    args:
      - '-c'
      - |
        [[ "$BRANCH_NAME" ]] && VERSION=${BRANCH_NAME}-${SHORT_SHA}
        [[ "$TAG_NAME" ]] && VERSION=$TAG_NAME
        docker push $$USERNAME/appinframodwithgke:frontend-$${VERSION}
    secretEnv: ['USERNAME']
    id: publish
    entrypoint: bash
    
  - id: 'deploy'
    name: 'gcr.io/cloud-builders/gcloud'
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
      - 'KUBECONFIG=/kube/config'
      - '_PROJECT_ID=$PROJECT_ID'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
          CLUSTER=$$(gcloud config get-value container/cluster)
          PROJECT=$$(gcloud config get-value core/project)
          ZONE=$$(gcloud config get-value compute/zone)
          
          [[ "$BRANCH_NAME" ]] && VERSION=${BRANCH_NAME}-${SHORT_SHA}
          [[ "$TAG_NAME" ]] && VERSION=$TAG_NAME

          gcloud container clusters get-credentials "$${CLUSTER}" \
            --project "$${PROJECT}" \
            --zone "$${ZONE}" 

          NS=qa
          TARGET_ENV=qa
          YAML_FILE=frontend-depl-dockerhub.yaml 

          #VERSION=$${BRANCH_NAME}-$${VERSION}


          #sed -i 's|gcr.io/PROJECT_ID/frontend:.*|gcr.io/'$${_PROJECT_ID}'/frontend:'$${VERSION}'|' ./frontend/kubernetes/deployments/$${TARGET_ENV}/*.yaml
          sed -i 's|/$$USERNAME/appinframodwithgke:frontend:.*|$$USERNAME/appinframodwithgke:frontend-'$${VERSION}'|' ./frontend/kubernetes/deployments/$${TARGET_ENV}/$${YAML_FILE}
          
          kubectl get ns $${NS} || kubectl create ns $${NS}
          kubectl apply --namespace $${NS} -f kubernetes/deployments/$${TARGET_ENV}/$${YAML_FILE}
availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/docker-password/versions/1
    env: 'PASSWORD'
  - versionName: projects/$PROJECT_ID/secrets/docker-username/versions/2
    env: 'USERNAME'